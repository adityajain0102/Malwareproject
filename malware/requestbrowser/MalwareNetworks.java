package com.malware.requestbrowser;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import com.malware.bean.MapCooridnates;
import com.malware.bean.NodeBean;

public class MalwareNetworks extends JFrame implements ActionListener {
	Graph graph;
	static int N,uenodes,rnnodes,enbNodes;
	Container _container;

	public MalwareNetworks(int uenodes,int rnnodes,int enbNodes) {
 
		init();
		setSize(800, 475);
		setVisible(true);
		setResizable(false);
		setBackground(new java.awt.Color(0, 0, 255));
		setForeground(new java.awt.Color(0, 0, 255));
		setTitle("Malware Detectionin Cloud Computing Infrastructures");
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
	}

	public void init() {
		graph = new Graph(uenodes,rnnodes,enbNodes);
		graph.setBounds(new Rectangle(0, 10, 793, 400));
		graph.setBackground(Color.WHITE);

		setBackground(new Color(90, 65, 214));
		_container = this.getContentPane();
		_container.setLayout(null);

		_container.add(graph, null);
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent event) {
			if (true) {
				try {
					int ss=5,d=10;	
					//graph.path = graph.path(ss, d, graph.node(ss));
					//Set set = graph.possiblePath(ss, d, graph.node(ss));
					//graph.repaint();
				} catch (Exception e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(this, e.getMessage(),
							"ERROR...", JOptionPane.ERROR_MESSAGE);
				}
			} 
	}

	// main method takes the no of nodes and creates the DSDV object
	public static void main(String args[]) {
		N = 5;

//		Object[] uepossibilities = {"6" };
//		int uenodes = Integer
//				.parseInt((String) JOptionPane
//						.showInputDialog(
//								new JPanel(),
//								"Please Enter the UE Nodes:",
//								"Customized Dialog",
//								JOptionPane.PLAIN_MESSAGE,
//								null, uepossibilities, "2"));
		
//		Object[] rnpossibilities = {"1","2","3","4" };
//		int rnnodes = Integer
//				.parseInt((String) JOptionPane
//						.showInputDialog(
//								new JPanel(),
//								"Please Enter the V-Node Nodes:",
//								"Customized Dialog",
//								JOptionPane.PLAIN_MESSAGE,
//								null, rnpossibilities, "250"));
		
		
//		Object[] eNbpossibilities = {"2" };
//		int enbNodes = Integer
//				.parseInt((String) JOptionPane
//						.showInputDialog(
//								new JPanel(),
//								"Please Enter the ENB Nodes:",
//								"Customized Dialog",
//								JOptionPane.PLAIN_MESSAGE,
//								null, eNbpossibilities, "250"));
		
		
//		JOptionPane.showMessageDialog(null, "You are selected the defalut once to form a sample network with "
//				+ uenodes + " UE Nodes, "+ rnnodes+" RN Nodes, "+ enbNodes+" ENB Nodes",
//				"Message",
//				JOptionPane.INFORMATION_MESSAGE);
		
		
		
		MalwareNetworks _DSDV = new MalwareNetworks(4,1,1);
		
		  int[] distanceArray = {50,100,150,200,250,300,350,400,450,500};
		  int[] energyArray = {10,20,30,40,50,60,70,80,90,100};
		  int[] freequencyArray = {25,50,100,150,200,250,300,350,400,450};
		  
		  
		  int[] rndistanceArray = {300,350,400,450,500};
		  int[] rnenergyArray = {600,700,800,900,1000};
		  int[] rnfreequencyArray = {250,300,350,400,450};
		  
		  
		  int[] enbrndistanceArray = {3000,3500,4000,4500,5000};
		  int[] enbrnenergyArray = {600,700,800,900,1000};
		  int[] enbrnfreequencyArray = {2500,3000,3500,4000,4500};
		
		
		
		Map<String,NodeBean> nodeMap = new HashMap<String,NodeBean>();
//		nodeMap.put("UE1", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
//		nodeMap.put("UE2", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
//		nodeMap.put("UE3", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
//		nodeMap.put("UE4", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
//		nodeMap.put("UE5", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
//		nodeMap.put("UE6", new NodeBean(distanceArray[new Random().nextInt(distanceArray.length-1)],energyArray[new Random().nextInt(energyArray.length-1)],freequencyArray[new Random().nextInt(freequencyArray.length)]));
		nodeMap.put("RN1", new NodeBean(rndistanceArray[new Random().nextInt(rndistanceArray.length-1)],rnenergyArray[new Random().nextInt(rnenergyArray.length-1)],rnfreequencyArray[new Random().nextInt(rnfreequencyArray.length)]));
		nodeMap.put("RN2", new NodeBean(rndistanceArray[new Random().nextInt(rndistanceArray.length-1)],rnenergyArray[new Random().nextInt(rnenergyArray.length-1)],rnfreequencyArray[new Random().nextInt(rnfreequencyArray.length)]));
		nodeMap.put("RN3", new NodeBean(rndistanceArray[new Random().nextInt(rndistanceArray.length-1)],rnenergyArray[new Random().nextInt(rnenergyArray.length-1)],rnfreequencyArray[new Random().nextInt(rnfreequencyArray.length)]));
		nodeMap.put("RN4", new NodeBean(rndistanceArray[new Random().nextInt(rndistanceArray.length-1)],rnenergyArray[new Random().nextInt(rnenergyArray.length-1)],rnfreequencyArray[new Random().nextInt(rnfreequencyArray.length)]));
//		nodeMap.put("ENB1", new NodeBean(rndistanceArray[new Random().nextInt(rndistanceArray.length-1)],rnenergyArray[new Random().nextInt(rnenergyArray.length-1)],rnfreequencyArray[new Random().nextInt(rnfreequencyArray.length)]));
//		nodeMap.put("ENB2", new NodeBean(enbrndistanceArray[new Random().nextInt(enbrndistanceArray.length-1)],enbrnenergyArray[new Random().nextInt(enbrnenergyArray.length-1)],enbrnfreequencyArray[new Random().nextInt(enbrnfreequencyArray.length)]));

	}
}
